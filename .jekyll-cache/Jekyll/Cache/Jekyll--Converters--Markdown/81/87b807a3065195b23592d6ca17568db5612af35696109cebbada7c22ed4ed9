I"ê<p>I wrote this python module to experiment with how CPython handles internal types.
It allows for the live replacement of internal methods with python ones.
Several examples are included, including <code class="highlighter-rouge">jsdict</code> and <code class="highlighter-rouge">iterint</code>.</p>

<h3 id="javascript-dictionaries">JavaScript dictionaries</h3>
<p>Makes python dictionary values settable via attributes</p>

<details>
  <summary>
    Example Usage
  </summary>

  <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">py_future</span> <span class="kn">import</span> <span class="n">jsdict</span>

<span class="n">x</span> <span class="o">=</span> <span class="p">{}</span>

<span class="n">x</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="s">'whatever'</span>

<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1"># {'a':'whatever'}
</span><span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">a</span><span class="p">)</span> <span class="c1"># whatever
</span>
<span class="k">del</span> <span class="n">x</span><span class="p">.</span><span class="n">a</span>

<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1"># {}
</span></pre></td></tr></tbody></table></code></pre></div>  </div>

</details>

<details>
  <summary>Implementation</summary>
  <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="c1"># py_future/jsdict.py
</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">_utils</span> <span class="k">as</span> <span class="n">utils</span>

<span class="o">@</span><span class="n">utils</span><span class="p">.</span><span class="n">edit</span><span class="p">(</span><span class="nb">dict</span><span class="p">,</span> <span class="s">'tp_getattro'</span><span class="p">)</span>
<span class="o">@</span><span class="n">utils</span><span class="p">.</span><span class="n">nullwrap</span>
<span class="k">def</span> <span class="nf">dict_getattro</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">dict</span><span class="p">.</span><span class="n">__getattribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">AttributeError</span> <span class="k">as</span> <span class="n">attr_err</span><span class="p">:</span>
        <span class="n">err</span> <span class="o">=</span> <span class="n">attr_err</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">dict</span><span class="p">.</span><span class="n">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
            <span class="k">pass</span>
    <span class="k">raise</span> <span class="n">err</span>

<span class="o">@</span><span class="n">utils</span><span class="p">.</span><span class="n">edit</span><span class="p">(</span><span class="nb">dict</span><span class="p">,</span> <span class="s">'tp_setattro'</span><span class="p">)</span>
<span class="o">@</span><span class="n">utils</span><span class="p">.</span><span class="n">nullwrap</span>
<span class="k">def</span> <span class="nf">dict_setattro</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">'c_int'</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">val</span> <span class="o">==</span> <span class="n">utils</span><span class="p">.</span><span class="n">Null</span><span class="p">:</span>
        <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="nb">dict</span><span class="p">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">0</span>
</pre></td></tr></tbody></table></code></pre></div>  </div>
</details>

<h3 id="iterable-integers-pep-276">Iterable Integers (PEP 276)</h3>
<p>Makes integers iterable</p>
<details>
  <summary>Example Usage</summary>
  <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">py_future</span> <span class="kn">import</span> <span class="n">iterint</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mi">10</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># prints 0 to 9
</span></pre></td></tr></tbody></table></code></pre></div>  </div>
</details>

<details>
  <summary>Implementation</summary>
  <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1"># py_future/iterint.py
</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">_utils</span> <span class="k">as</span> <span class="n">utils</span>

<span class="o">@</span><span class="n">utils</span><span class="p">.</span><span class="n">edit</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="s">'tp_iter'</span><span class="p">)</span>
<span class="o">@</span><span class="n">utils</span><span class="p">.</span><span class="n">nullwrap</span>
<span class="k">def</span> <span class="nf">int_iter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">yield</span> <span class="k">from</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div>  </div>
</details>
:ET